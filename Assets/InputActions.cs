//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Player Movement"",
            ""id"": ""8c977bad-2638-40d2-b755-284a3475b652"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""60e0165b-59ac-4475-9568-5835db329c4d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""Value"",
                    ""id"": ""924b8cc8-f196-4860-8345-a004336351c9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Lock On Left"",
                    ""type"": ""Button"",
                    ""id"": ""bb85a64e-a1dc-4aaa-9cbe-b8ba9ad460a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lock On Right"",
                    ""type"": ""Button"",
                    ""id"": ""8bf309f4-7dc5-448d-9cf0-cb1af697b671"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""4fcc3000-2ebf-478a-9e88-2712c297991d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ec79fbbf-d7a4-4e4f-bee4-84bdbe71a66a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2fef18d2-292f-4805-a06a-62d5464c6dd3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6be66697-1946-4ffa-9205-a15e37f6b994"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""03a33751-1937-4257-acd2-bd56aaec68e5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8d2cf706-b0d7-46d5-a916-5c66bab3a74c"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""634fff51-8991-45ae-9789-5c71d7a18da8"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lock On Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31d0180c-06aa-4833-8a56-73f5aa1fff6c"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lock On Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player Actions"",
            ""id"": ""1876ae7a-ff23-4378-bf31-82910797b3f2"",
            ""actions"": [
                {
                    ""name"": ""InventoryButton"",
                    ""type"": ""Button"",
                    ""id"": ""f0aa2890-428d-4189-9453-c431ead91141"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cretical Attack"",
                    ""type"": ""Button"",
                    ""id"": ""1576e884-1a73-4124-8a66-b426c22e66eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""97036d8e-1abc-4bbc-9f77-09c634b7df01"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""456347f0-f2b5-4365-881f-4ac66834d19b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""82e4b9d0-528c-4265-a702-4570fd19555c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""X"",
                    ""type"": ""Button"",
                    ""id"": ""c88bbe8c-68a4-497b-918f-4c154d3f98fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Y"",
                    ""type"": ""Button"",
                    ""id"": ""cfe15138-9cc6-4474-884f-939449673630"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LockOn"",
                    ""type"": ""Button"",
                    ""id"": ""9f499122-26eb-496d-9029-a64ce30d7bb0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TapRB"",
                    ""type"": ""Button"",
                    ""id"": ""b2fdd783-d578-4be8-9480-3703f276454e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldRB"",
                    ""type"": ""Button"",
                    ""id"": ""adc9c37a-ca86-4047-bff2-e2cdae5a530c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TapRT"",
                    ""type"": ""Button"",
                    ""id"": ""526e6f32-c3f4-4f3b-ac0f-a9516f6c92a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldRT"",
                    ""type"": ""Button"",
                    ""id"": ""fb225fae-2113-4230-9fcb-af2830724646"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TapLB"",
                    ""type"": ""Button"",
                    ""id"": ""ec0aecf5-27ee-4671-af0d-2b643a147c05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldLB"",
                    ""type"": ""Button"",
                    ""id"": ""c3e4d336-ddec-479f-9235-a8d54ea9c54d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TapLT"",
                    ""type"": ""Button"",
                    ""id"": ""3ccdb3b6-98d0-4527-ad9b-a98208233cb6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldLT"",
                    ""type"": ""Button"",
                    ""id"": ""f07fc09c-8d05-4bf0-9165-ea2b239bb097"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a48223be-4623-47e4-ab1e-ce0f38ce8eaf"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cbb3fcc3-b73e-4dc4-9bdc-6a762e99c96c"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LockOn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4a1ee1e-c626-4018-94ad-fca8591feace"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""00bbe160-6d87-4214-9634-17c00c43d06d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapRB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""500cb330-4656-487e-9ba8-f1843e4e4206"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldRB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""434c88a7-31dc-40e5-9225-2056cff0f40d"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapRT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13849d15-f692-4906-8f0b-41367c27a9ec"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldRT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb76c91b-eb3e-48d6-97d1-58117b76fb36"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapLT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57da4376-86fe-4698-a624-89367301894c"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapLB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4bda5cee-f0ed-4507-899a-f705b7551b13"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldLB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68f2e16b-1696-4a3d-9c96-919c77c38aa0"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ec14868-9ea3-4dd5-b280-a56fa2aab9b4"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldLT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69a1279b-52ec-4efc-a37e-82e62b047808"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b89b8247-a829-4b9b-b3fd-521d1cfc5187"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91f7eaa4-923b-48b2-97a9-b1d373d9541d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InventoryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e3fa825-167e-4a1d-a6d1-efc20cbd55c2"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cretical Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player Quick Slots"",
            ""id"": ""57f21145-3026-464f-8e9d-3bafca2b66cd"",
            ""actions"": [
                {
                    ""name"": ""D-Pad_Up"",
                    ""type"": ""Button"",
                    ""id"": ""ef55b5df-05fe-4007-8e97-215f10ddf475"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""D-Pad_Dowm"",
                    ""type"": ""Button"",
                    ""id"": ""73f71f77-6ad5-411b-89c8-6b325e7cf05e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""D-Pad_Right"",
                    ""type"": ""Button"",
                    ""id"": ""e10e000d-5c06-487a-a710-8916caf8eb41"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""D-Pad_Left"",
                    ""type"": ""Button"",
                    ""id"": ""1ee3be95-93b4-450d-a86d-35b8aa906477"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""036b66a5-7125-4e10-8102-0011f5f66792"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D-Pad_Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3aa64873-ce8e-4257-8d32-8ca9c4fcd71f"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D-Pad_Dowm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f70823e2-7570-4d8c-abc6-309102acad94"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D-Pad_Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""434a70b9-895a-4293-8840-9c28027128b0"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D-Pad_Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player Movement
        m_PlayerMovement = asset.FindActionMap("Player Movement", throwIfNotFound: true);
        m_PlayerMovement_Movement = m_PlayerMovement.FindAction("Movement", throwIfNotFound: true);
        m_PlayerMovement_Camera = m_PlayerMovement.FindAction("Camera", throwIfNotFound: true);
        m_PlayerMovement_LockOnLeft = m_PlayerMovement.FindAction("Lock On Left", throwIfNotFound: true);
        m_PlayerMovement_LockOnRight = m_PlayerMovement.FindAction("Lock On Right", throwIfNotFound: true);
        // Player Actions
        m_PlayerActions = asset.FindActionMap("Player Actions", throwIfNotFound: true);
        m_PlayerActions_InventoryButton = m_PlayerActions.FindAction("InventoryButton", throwIfNotFound: true);
        m_PlayerActions_CreticalAttack = m_PlayerActions.FindAction("Cretical Attack", throwIfNotFound: true);
        m_PlayerActions_Jump = m_PlayerActions.FindAction("Jump", throwIfNotFound: true);
        m_PlayerActions_Roll = m_PlayerActions.FindAction("Roll", throwIfNotFound: true);
        m_PlayerActions_A = m_PlayerActions.FindAction("A", throwIfNotFound: true);
        m_PlayerActions_X = m_PlayerActions.FindAction("X", throwIfNotFound: true);
        m_PlayerActions_Y = m_PlayerActions.FindAction("Y", throwIfNotFound: true);
        m_PlayerActions_LockOn = m_PlayerActions.FindAction("LockOn", throwIfNotFound: true);
        m_PlayerActions_TapRB = m_PlayerActions.FindAction("TapRB", throwIfNotFound: true);
        m_PlayerActions_HoldRB = m_PlayerActions.FindAction("HoldRB", throwIfNotFound: true);
        m_PlayerActions_TapRT = m_PlayerActions.FindAction("TapRT", throwIfNotFound: true);
        m_PlayerActions_HoldRT = m_PlayerActions.FindAction("HoldRT", throwIfNotFound: true);
        m_PlayerActions_TapLB = m_PlayerActions.FindAction("TapLB", throwIfNotFound: true);
        m_PlayerActions_HoldLB = m_PlayerActions.FindAction("HoldLB", throwIfNotFound: true);
        m_PlayerActions_TapLT = m_PlayerActions.FindAction("TapLT", throwIfNotFound: true);
        m_PlayerActions_HoldLT = m_PlayerActions.FindAction("HoldLT", throwIfNotFound: true);
        // Player Quick Slots
        m_PlayerQuickSlots = asset.FindActionMap("Player Quick Slots", throwIfNotFound: true);
        m_PlayerQuickSlots_DPad_Up = m_PlayerQuickSlots.FindAction("D-Pad_Up", throwIfNotFound: true);
        m_PlayerQuickSlots_DPad_Dowm = m_PlayerQuickSlots.FindAction("D-Pad_Dowm", throwIfNotFound: true);
        m_PlayerQuickSlots_DPad_Right = m_PlayerQuickSlots.FindAction("D-Pad_Right", throwIfNotFound: true);
        m_PlayerQuickSlots_DPad_Left = m_PlayerQuickSlots.FindAction("D-Pad_Left", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Movement
    private readonly InputActionMap m_PlayerMovement;
    private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
    private readonly InputAction m_PlayerMovement_Movement;
    private readonly InputAction m_PlayerMovement_Camera;
    private readonly InputAction m_PlayerMovement_LockOnLeft;
    private readonly InputAction m_PlayerMovement_LockOnRight;
    public struct PlayerMovementActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerMovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMovement_Movement;
        public InputAction @Camera => m_Wrapper.m_PlayerMovement_Camera;
        public InputAction @LockOnLeft => m_Wrapper.m_PlayerMovement_LockOnLeft;
        public InputAction @LockOnRight => m_Wrapper.m_PlayerMovement_LockOnRight;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Camera.started += instance.OnCamera;
            @Camera.performed += instance.OnCamera;
            @Camera.canceled += instance.OnCamera;
            @LockOnLeft.started += instance.OnLockOnLeft;
            @LockOnLeft.performed += instance.OnLockOnLeft;
            @LockOnLeft.canceled += instance.OnLockOnLeft;
            @LockOnRight.started += instance.OnLockOnRight;
            @LockOnRight.performed += instance.OnLockOnRight;
            @LockOnRight.canceled += instance.OnLockOnRight;
        }

        private void UnregisterCallbacks(IPlayerMovementActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Camera.started -= instance.OnCamera;
            @Camera.performed -= instance.OnCamera;
            @Camera.canceled -= instance.OnCamera;
            @LockOnLeft.started -= instance.OnLockOnLeft;
            @LockOnLeft.performed -= instance.OnLockOnLeft;
            @LockOnLeft.canceled -= instance.OnLockOnLeft;
            @LockOnRight.started -= instance.OnLockOnRight;
            @LockOnRight.performed -= instance.OnLockOnRight;
            @LockOnRight.canceled -= instance.OnLockOnRight;
        }

        public void RemoveCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // Player Actions
    private readonly InputActionMap m_PlayerActions;
    private List<IPlayerActionsActions> m_PlayerActionsActionsCallbackInterfaces = new List<IPlayerActionsActions>();
    private readonly InputAction m_PlayerActions_InventoryButton;
    private readonly InputAction m_PlayerActions_CreticalAttack;
    private readonly InputAction m_PlayerActions_Jump;
    private readonly InputAction m_PlayerActions_Roll;
    private readonly InputAction m_PlayerActions_A;
    private readonly InputAction m_PlayerActions_X;
    private readonly InputAction m_PlayerActions_Y;
    private readonly InputAction m_PlayerActions_LockOn;
    private readonly InputAction m_PlayerActions_TapRB;
    private readonly InputAction m_PlayerActions_HoldRB;
    private readonly InputAction m_PlayerActions_TapRT;
    private readonly InputAction m_PlayerActions_HoldRT;
    private readonly InputAction m_PlayerActions_TapLB;
    private readonly InputAction m_PlayerActions_HoldLB;
    private readonly InputAction m_PlayerActions_TapLT;
    private readonly InputAction m_PlayerActions_HoldLT;
    public struct PlayerActionsActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActionsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @InventoryButton => m_Wrapper.m_PlayerActions_InventoryButton;
        public InputAction @CreticalAttack => m_Wrapper.m_PlayerActions_CreticalAttack;
        public InputAction @Jump => m_Wrapper.m_PlayerActions_Jump;
        public InputAction @Roll => m_Wrapper.m_PlayerActions_Roll;
        public InputAction @A => m_Wrapper.m_PlayerActions_A;
        public InputAction @X => m_Wrapper.m_PlayerActions_X;
        public InputAction @Y => m_Wrapper.m_PlayerActions_Y;
        public InputAction @LockOn => m_Wrapper.m_PlayerActions_LockOn;
        public InputAction @TapRB => m_Wrapper.m_PlayerActions_TapRB;
        public InputAction @HoldRB => m_Wrapper.m_PlayerActions_HoldRB;
        public InputAction @TapRT => m_Wrapper.m_PlayerActions_TapRT;
        public InputAction @HoldRT => m_Wrapper.m_PlayerActions_HoldRT;
        public InputAction @TapLB => m_Wrapper.m_PlayerActions_TapLB;
        public InputAction @HoldLB => m_Wrapper.m_PlayerActions_HoldLB;
        public InputAction @TapLT => m_Wrapper.m_PlayerActions_TapLT;
        public InputAction @HoldLT => m_Wrapper.m_PlayerActions_HoldLT;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Add(instance);
            @InventoryButton.started += instance.OnInventoryButton;
            @InventoryButton.performed += instance.OnInventoryButton;
            @InventoryButton.canceled += instance.OnInventoryButton;
            @CreticalAttack.started += instance.OnCreticalAttack;
            @CreticalAttack.performed += instance.OnCreticalAttack;
            @CreticalAttack.canceled += instance.OnCreticalAttack;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
            @A.started += instance.OnA;
            @A.performed += instance.OnA;
            @A.canceled += instance.OnA;
            @X.started += instance.OnX;
            @X.performed += instance.OnX;
            @X.canceled += instance.OnX;
            @Y.started += instance.OnY;
            @Y.performed += instance.OnY;
            @Y.canceled += instance.OnY;
            @LockOn.started += instance.OnLockOn;
            @LockOn.performed += instance.OnLockOn;
            @LockOn.canceled += instance.OnLockOn;
            @TapRB.started += instance.OnTapRB;
            @TapRB.performed += instance.OnTapRB;
            @TapRB.canceled += instance.OnTapRB;
            @HoldRB.started += instance.OnHoldRB;
            @HoldRB.performed += instance.OnHoldRB;
            @HoldRB.canceled += instance.OnHoldRB;
            @TapRT.started += instance.OnTapRT;
            @TapRT.performed += instance.OnTapRT;
            @TapRT.canceled += instance.OnTapRT;
            @HoldRT.started += instance.OnHoldRT;
            @HoldRT.performed += instance.OnHoldRT;
            @HoldRT.canceled += instance.OnHoldRT;
            @TapLB.started += instance.OnTapLB;
            @TapLB.performed += instance.OnTapLB;
            @TapLB.canceled += instance.OnTapLB;
            @HoldLB.started += instance.OnHoldLB;
            @HoldLB.performed += instance.OnHoldLB;
            @HoldLB.canceled += instance.OnHoldLB;
            @TapLT.started += instance.OnTapLT;
            @TapLT.performed += instance.OnTapLT;
            @TapLT.canceled += instance.OnTapLT;
            @HoldLT.started += instance.OnHoldLT;
            @HoldLT.performed += instance.OnHoldLT;
            @HoldLT.canceled += instance.OnHoldLT;
        }

        private void UnregisterCallbacks(IPlayerActionsActions instance)
        {
            @InventoryButton.started -= instance.OnInventoryButton;
            @InventoryButton.performed -= instance.OnInventoryButton;
            @InventoryButton.canceled -= instance.OnInventoryButton;
            @CreticalAttack.started -= instance.OnCreticalAttack;
            @CreticalAttack.performed -= instance.OnCreticalAttack;
            @CreticalAttack.canceled -= instance.OnCreticalAttack;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
            @A.started -= instance.OnA;
            @A.performed -= instance.OnA;
            @A.canceled -= instance.OnA;
            @X.started -= instance.OnX;
            @X.performed -= instance.OnX;
            @X.canceled -= instance.OnX;
            @Y.started -= instance.OnY;
            @Y.performed -= instance.OnY;
            @Y.canceled -= instance.OnY;
            @LockOn.started -= instance.OnLockOn;
            @LockOn.performed -= instance.OnLockOn;
            @LockOn.canceled -= instance.OnLockOn;
            @TapRB.started -= instance.OnTapRB;
            @TapRB.performed -= instance.OnTapRB;
            @TapRB.canceled -= instance.OnTapRB;
            @HoldRB.started -= instance.OnHoldRB;
            @HoldRB.performed -= instance.OnHoldRB;
            @HoldRB.canceled -= instance.OnHoldRB;
            @TapRT.started -= instance.OnTapRT;
            @TapRT.performed -= instance.OnTapRT;
            @TapRT.canceled -= instance.OnTapRT;
            @HoldRT.started -= instance.OnHoldRT;
            @HoldRT.performed -= instance.OnHoldRT;
            @HoldRT.canceled -= instance.OnHoldRT;
            @TapLB.started -= instance.OnTapLB;
            @TapLB.performed -= instance.OnTapLB;
            @TapLB.canceled -= instance.OnTapLB;
            @HoldLB.started -= instance.OnHoldLB;
            @HoldLB.performed -= instance.OnHoldLB;
            @HoldLB.canceled -= instance.OnHoldLB;
            @TapLT.started -= instance.OnTapLT;
            @TapLT.performed -= instance.OnTapLT;
            @TapLT.canceled -= instance.OnTapLT;
            @HoldLT.started -= instance.OnHoldLT;
            @HoldLT.performed -= instance.OnHoldLT;
            @HoldLT.canceled -= instance.OnHoldLT;
        }

        public void RemoveCallbacks(IPlayerActionsActions instance)
        {
            if (m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActionsActions @PlayerActions => new PlayerActionsActions(this);

    // Player Quick Slots
    private readonly InputActionMap m_PlayerQuickSlots;
    private List<IPlayerQuickSlotsActions> m_PlayerQuickSlotsActionsCallbackInterfaces = new List<IPlayerQuickSlotsActions>();
    private readonly InputAction m_PlayerQuickSlots_DPad_Up;
    private readonly InputAction m_PlayerQuickSlots_DPad_Dowm;
    private readonly InputAction m_PlayerQuickSlots_DPad_Right;
    private readonly InputAction m_PlayerQuickSlots_DPad_Left;
    public struct PlayerQuickSlotsActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerQuickSlotsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @DPad_Up => m_Wrapper.m_PlayerQuickSlots_DPad_Up;
        public InputAction @DPad_Dowm => m_Wrapper.m_PlayerQuickSlots_DPad_Dowm;
        public InputAction @DPad_Right => m_Wrapper.m_PlayerQuickSlots_DPad_Right;
        public InputAction @DPad_Left => m_Wrapper.m_PlayerQuickSlots_DPad_Left;
        public InputActionMap Get() { return m_Wrapper.m_PlayerQuickSlots; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerQuickSlotsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerQuickSlotsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterfaces.Add(instance);
            @DPad_Up.started += instance.OnDPad_Up;
            @DPad_Up.performed += instance.OnDPad_Up;
            @DPad_Up.canceled += instance.OnDPad_Up;
            @DPad_Dowm.started += instance.OnDPad_Dowm;
            @DPad_Dowm.performed += instance.OnDPad_Dowm;
            @DPad_Dowm.canceled += instance.OnDPad_Dowm;
            @DPad_Right.started += instance.OnDPad_Right;
            @DPad_Right.performed += instance.OnDPad_Right;
            @DPad_Right.canceled += instance.OnDPad_Right;
            @DPad_Left.started += instance.OnDPad_Left;
            @DPad_Left.performed += instance.OnDPad_Left;
            @DPad_Left.canceled += instance.OnDPad_Left;
        }

        private void UnregisterCallbacks(IPlayerQuickSlotsActions instance)
        {
            @DPad_Up.started -= instance.OnDPad_Up;
            @DPad_Up.performed -= instance.OnDPad_Up;
            @DPad_Up.canceled -= instance.OnDPad_Up;
            @DPad_Dowm.started -= instance.OnDPad_Dowm;
            @DPad_Dowm.performed -= instance.OnDPad_Dowm;
            @DPad_Dowm.canceled -= instance.OnDPad_Dowm;
            @DPad_Right.started -= instance.OnDPad_Right;
            @DPad_Right.performed -= instance.OnDPad_Right;
            @DPad_Right.canceled -= instance.OnDPad_Right;
            @DPad_Left.started -= instance.OnDPad_Left;
            @DPad_Left.performed -= instance.OnDPad_Left;
            @DPad_Left.canceled -= instance.OnDPad_Left;
        }

        public void RemoveCallbacks(IPlayerQuickSlotsActions instance)
        {
            if (m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerQuickSlotsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerQuickSlotsActions @PlayerQuickSlots => new PlayerQuickSlotsActions(this);
    public interface IPlayerMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
        void OnLockOnLeft(InputAction.CallbackContext context);
        void OnLockOnRight(InputAction.CallbackContext context);
    }
    public interface IPlayerActionsActions
    {
        void OnInventoryButton(InputAction.CallbackContext context);
        void OnCreticalAttack(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnA(InputAction.CallbackContext context);
        void OnX(InputAction.CallbackContext context);
        void OnY(InputAction.CallbackContext context);
        void OnLockOn(InputAction.CallbackContext context);
        void OnTapRB(InputAction.CallbackContext context);
        void OnHoldRB(InputAction.CallbackContext context);
        void OnTapRT(InputAction.CallbackContext context);
        void OnHoldRT(InputAction.CallbackContext context);
        void OnTapLB(InputAction.CallbackContext context);
        void OnHoldLB(InputAction.CallbackContext context);
        void OnTapLT(InputAction.CallbackContext context);
        void OnHoldLT(InputAction.CallbackContext context);
    }
    public interface IPlayerQuickSlotsActions
    {
        void OnDPad_Up(InputAction.CallbackContext context);
        void OnDPad_Dowm(InputAction.CallbackContext context);
        void OnDPad_Right(InputAction.CallbackContext context);
        void OnDPad_Left(InputAction.CallbackContext context);
    }
}
